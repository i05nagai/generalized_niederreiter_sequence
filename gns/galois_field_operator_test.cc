#include "gns/galois_field_operator.h"
#include "gns/test_util/gtest_assertion.h"
#include <algorithm>
#include <functional>
#include <gtest/gtest.h>

namespace gns {
template <int Base>
void check_operator_add(
    const std::vector<unsigned int>& test_case_data,
    std::vector<GaloisField<Base>>& test_case)
{
  std::function<
    GaloisField<Base> (const GaloisField<Base>&, const GaloisField<Base>&)
  > op = [](const GaloisField<Base>& e1, const GaloisField<Base>& e2) {
    return e1 + e2;
  };
  std::transform(
      test_case_data.begin(),
      test_case_data.end(),
      test_case.begin(),
      [](const unsigned int x){
        return GaloisField<Base>(x);
      });
  GNS_EXPECT_GALOIS_FIELD_OP(test_case, op);
}

TEST(GaloisFieldOperatorTest, OperatorAdd)
{
  // base 2
  {
    const std::vector<unsigned int> test_case_data = {
      // lhs, rhs, expect
      0, 0, 0,
      0, 1, 1,
      1, 0, 1,
      1, 1, 0,
    };
    std::vector<GaloisField<2>> test_case(test_case_data.size());
    check_operator_add(test_case_data, test_case);
  }
  // base 4
  {
    const std::vector<unsigned int> test_case_data = {
      // lhs, rhs, expect
      0, 0, 0,
      0, 1, 1,
      0, 2, 2,
      0, 3, 3,
      1, 0, 1,
      1, 1, 0,
      1, 2, 3,
      1, 3, 2,
      2, 0, 2,
      2, 1, 3,
      2, 2, 0,
      2, 3, 1,
      3, 0, 3,
      3, 1, 2,
      3, 2, 1,
      3, 3, 0,
    };
    std::vector<GaloisField<4>> test_case(test_case_data.size());
    check_operator_add(test_case_data, test_case);
  }
  // base 16
  {
    const std::vector<unsigned int> test_case_data = {
      // lhs, rhs, expect
      0, 0,   0,
      0, 1,   1,
      0, 2,   2,
      0, 3,   3,
      0, 4,   4,
      0, 5,   5,
      0, 6,   6,
      0, 7,   7,
      0, 8,   8,
      0, 9,   9,
      0, 10,  10,
      0, 11,  11,
      0, 12,  12,
      0, 13,  13,
      0, 14,  14,
      0, 15,  15,
      1, 0,   1,
      1, 1,   0,
      1, 2,   3,
      1, 3,   2,
      1, 4,   5,
      1, 5,   4,
      1, 6,   7,
      1, 7,   6,
      1, 8,   9,
      1, 9,   8,
      1, 10,  11,
      1, 11,  10,
      1, 12,  13,
      1, 13,  12,
      1, 14,  15,
      1, 15,  14,
      2, 0,   2,
      2, 1,   3,
      2, 2,   0,
      2, 3,   1,
      2, 4,   6,
      2, 5,   7,
      2, 6,   4,
      2, 7,   5,
      2, 8,   10,
      2, 9,   11,
      2, 10,  8,
      2, 11,  9,
      2, 12,  14,
      2, 13,  15,
      2, 14,  12,
      2, 15,  13,
      3, 0,   3,
      3, 1,   2,
      3, 2,   1,
      3, 3,   0,
      3, 4,   7,
      3, 5,   6,
      3, 6,   5,
      3, 7,   4,
      3, 8,   11,
      3, 9,   10,
      3, 10,  9,
      3, 11,  8,
      3, 12,  15,
      3, 13,  14,
      3, 14,  13,
      3, 15,  12,
      4, 0,   4,
      4, 1,   5,
      4, 2,   6,
      4, 3,   7,
      4, 4,   0,
      4, 5,   1,
      4, 6,   2,
      4, 7,   3,
      4, 8,   12,
      4, 9,   13,
      4, 10,  14,
      4, 11,  15,
      4, 12,  8,
      4, 13,  9,
      4, 14,  10,
      4, 15,  11,
      5, 0,   5,
      5, 1,   4,
      5, 2,   7,
      5, 3,   6,
      5, 4,   1,
      5, 5,   0,
      5, 6,   3,
      5, 7,   2,
      5, 8,   13,
      5, 9,   12,
      5, 10,  15,
      5, 11,  14,
      5, 12,  9,
      5, 13,  8,
      5, 14,  11,
      5, 15,  10,
      6, 0,   6,
      6, 1,   7,
      6, 2,   4,
      6, 3,   5,
      6, 4,   2,
      6, 5,   3,
      6, 6,   0,
      6, 7,   1,
      6, 8,   14,
      6, 9,   15,
      6, 10,  12,
      6, 11,  13,
      6, 12,  10,
      6, 13,  11,
      6, 14,  8,
      6, 15,  9,
      7, 0,   7,
      7, 1,   6,
      7, 2,   5,
      7, 3,   4,
      7, 4,   3,
      7, 5,   2,
      7, 6,   1,
      7, 7,   0,
      7, 8,   15,
      7, 9,   14,
      7, 10,  13,
      7, 11,  12,
      7, 12,  11,
      7, 13,  10,
      7, 14,  9,
      7, 15,  8,
      8, 0,   8,
      8, 1,   9,
      8, 2,   10,
      8, 3,   11,
      8, 4,   12,
      8, 5,   13,
      8, 6,   14,
      8, 7,   15,
      8, 8,   0,
      8, 9,   1,
      8, 10,  2,
      8, 11,  3,
      8, 12,  4,
      8, 13,  5,
      8, 14,  6,
      8, 15,  7,
      9, 0,   9,
      9, 1,   8,
      9, 2,   11,
      9, 3,   10,
      9, 4,   13,
      9, 5,   12,
      9, 6,   15,
      9, 7,   14,
      9, 8,   1,
      9, 9,   0,
      9, 10,  3,
      9, 11,  2,
      9, 12,  5,
      9, 13,  4,
      9, 14,  7,
      9, 15,  6,
      10, 0,  10,
      10, 1,  11,
      10, 2,  8,
      10, 3,  9,
      10, 4,  14,
      10, 5,  15,
      10, 6,  12,
      10, 7,  13,
      10, 8,  2,
      10, 9,  3,
      10, 10, 0,
      10, 11, 1,
      10, 12, 6,
      10, 13, 7,
      10, 14, 4,
      10, 15, 5,
      11, 0,  11,
      11, 1,  10,
      11, 2,  9,
      11, 3,  8,
      11, 4,  15,
      11, 5,  14,
      11, 6,  13,
      11, 7,  12,
      11, 8,  3,
      11, 9,  2,
      11, 10, 1,
      11, 11, 0,
      11, 12, 7,
      11, 13, 6,
      11, 14, 5,
      11, 15, 4,
      12, 0,  12,
      12, 1,  13,
      12, 2,  14,
      12, 3,  15,
      12, 4,  8,
      12, 5,  9,
      12, 6,  10,
      12, 7,  11,
      12, 8,  4,
      12, 9,  5,
      12, 10, 6,
      12, 11, 7,
      12, 12, 0,
      12, 13, 1,
      12, 14, 2,
      12, 15, 3,
      13, 0,  13,
      13, 1,  12,
      13, 2,  15,
      13, 3,  14,
      13, 4,  9,
      13, 5,  8,
      13, 6,  11,
      13, 7,  10,
      13, 8,  5,
      13, 9,  4,
      13, 10, 7,
      13, 11, 6,
      13, 12, 1,
      13, 13, 0,
      13, 14, 3,
      13, 15, 2,
      14, 0,  14,
      14, 1,  15,
      14, 2,  12,
      14, 3,  13,
      14, 4,  10,
      14, 5,  11,
      14, 6,  8,
      14, 7,  9,
      14, 8,  6,
      14, 9,  7,
      14, 10, 4,
      14, 11, 5,
      14, 12, 2,
      14, 13, 3,
      14, 14, 0,
      14, 15, 1,
      15, 0,  15,
      15, 1,  14,
      15, 2,  13,
      15, 3,  12,
      15, 4,  11,
      15, 5,  10,
      15, 6,  9,
      15, 7,  8,
      15, 8,  7,
      15, 9,  6,
      15, 10, 5,
      15, 11, 4,
      15, 12, 3,
      15, 13, 2,
      15, 14, 1,
      15, 15, 0,
    };
    std::vector<GaloisField<16>> test_case(test_case_data.size());
    check_operator_add(test_case_data, test_case);
  }
}

template <int Base>
void check_operator_sub(
    const std::vector<unsigned int>& test_case_data,
    std::vector<GaloisField<Base>>& test_case)
{
  std::function<
    GaloisField<Base> (const GaloisField<Base>&, const GaloisField<Base>&)
  > op = [](const GaloisField<Base>& e1, const GaloisField<Base>& e2) {
    return e1 - e2;
  };
  std::transform(
      test_case_data.begin(),
      test_case_data.end(),
      test_case.begin(),
      [](const unsigned int x){
        return GaloisField<Base>(x);
      });
  GNS_EXPECT_GALOIS_FIELD_OP(test_case, op);
}

TEST(GaloisFieldOperatorTest, OperatorSub)
{
  // base 2
  {
    const std::vector<unsigned int> test_case_data = {
      // lhs, rhs, expect
      0, 0, 0,
      0, 1, 1,
      1, 0, 1,
      1, 1, 0,
    };
    std::vector<GaloisField<2>> test_case(test_case_data.size());
    check_operator_sub(test_case_data, test_case);
  }
  // base 4
  {
    const std::vector<unsigned int> test_case_data = {
      // lhs, rhs, expect
      0, 0, 0,
      0, 1, 1,
      0, 2, 2,
      0, 3, 3,
      1, 0, 1,
      1, 1, 0,
      1, 2, 3,
      1, 3, 2,
      2, 0, 2,
      2, 1, 3,
      2, 2, 0,
      2, 3, 1,
      3, 0, 3,
      3, 1, 2,
      3, 2, 1,
      3, 3, 0,
    };
    std::vector<GaloisField<4>> test_case(test_case_data.size());
    check_operator_sub(test_case_data, test_case);
  }
  // base 16
  {
    const std::vector<unsigned int> test_case_data = {
      // lhs, rhs, expect
      0, 0,   0,
      0, 1,   1,
      0, 2,   2,
      0, 3,   3,
      0, 4,   4,
      0, 5,   5,
      0, 6,   6,
      0, 7,   7,
      0, 8,   8,
      0, 9,   9,
      0, 10,  10,
      0, 11,  11,
      0, 12,  12,
      0, 13,  13,
      0, 14,  14,
      0, 15,  15,
      1, 0,   1,
      1, 1,   0,
      1, 2,   3,
      1, 3,   2,
      1, 4,   5,
      1, 5,   4,
      1, 6,   7,
      1, 7,   6,
      1, 8,   9,
      1, 9,   8,
      1, 10,  11,
      1, 11,  10,
      1, 12,  13,
      1, 13,  12,
      1, 14,  15,
      1, 15,  14,
      2, 0,   2,
      2, 1,   3,
      2, 2,   0,
      2, 3,   1,
      2, 4,   6,
      2, 5,   7,
      2, 6,   4,
      2, 7,   5,
      2, 8,   10,
      2, 9,   11,
      2, 10,  8,
      2, 11,  9,
      2, 12,  14,
      2, 13,  15,
      2, 14,  12,
      2, 15,  13,
      3, 0,   3,
      3, 1,   2,
      3, 2,   1,
      3, 3,   0,
      3, 4,   7,
      3, 5,   6,
      3, 6,   5,
      3, 7,   4,
      3, 8,   11,
      3, 9,   10,
      3, 10,  9,
      3, 11,  8,
      3, 12,  15,
      3, 13,  14,
      3, 14,  13,
      3, 15,  12,
      4, 0,   4,
      4, 1,   5,
      4, 2,   6,
      4, 3,   7,
      4, 4,   0,
      4, 5,   1,
      4, 6,   2,
      4, 7,   3,
      4, 8,   12,
      4, 9,   13,
      4, 10,  14,
      4, 11,  15,
      4, 12,  8,
      4, 13,  9,
      4, 14,  10,
      4, 15,  11,
      5, 0,   5,
      5, 1,   4,
      5, 2,   7,
      5, 3,   6,
      5, 4,   1,
      5, 5,   0,
      5, 6,   3,
      5, 7,   2,
      5, 8,   13,
      5, 9,   12,
      5, 10,  15,
      5, 11,  14,
      5, 12,  9,
      5, 13,  8,
      5, 14,  11,
      5, 15,  10,
      6, 0,   6,
      6, 1,   7,
      6, 2,   4,
      6, 3,   5,
      6, 4,   2,
      6, 5,   3,
      6, 6,   0,
      6, 7,   1,
      6, 8,   14,
      6, 9,   15,
      6, 10,  12,
      6, 11,  13,
      6, 12,  10,
      6, 13,  11,
      6, 14,  8,
      6, 15,  9,
      7, 0,   7,
      7, 1,   6,
      7, 2,   5,
      7, 3,   4,
      7, 4,   3,
      7, 5,   2,
      7, 6,   1,
      7, 7,   0,
      7, 8,   15,
      7, 9,   14,
      7, 10,  13,
      7, 11,  12,
      7, 12,  11,
      7, 13,  10,
      7, 14,  9,
      7, 15,  8,
      8, 0,   8,
      8, 1,   9,
      8, 2,   10,
      8, 3,   11,
      8, 4,   12,
      8, 5,   13,
      8, 6,   14,
      8, 7,   15,
      8, 8,   0,
      8, 9,   1,
      8, 10,  2,
      8, 11,  3,
      8, 12,  4,
      8, 13,  5,
      8, 14,  6,
      8, 15,  7,
      9, 0,   9,
      9, 1,   8,
      9, 2,   11,
      9, 3,   10,
      9, 4,   13,
      9, 5,   12,
      9, 6,   15,
      9, 7,   14,
      9, 8,   1,
      9, 9,   0,
      9, 10,  3,
      9, 11,  2,
      9, 12,  5,
      9, 13,  4,
      9, 14,  7,
      9, 15,  6,
      10, 0,  10,
      10, 1,  11,
      10, 2,  8,
      10, 3,  9,
      10, 4,  14,
      10, 5,  15,
      10, 6,  12,
      10, 7,  13,
      10, 8,  2,
      10, 9,  3,
      10, 10, 0,
      10, 11, 1,
      10, 12, 6,
      10, 13, 7,
      10, 14, 4,
      10, 15, 5,
      11, 0,  11,
      11, 1,  10,
      11, 2,  9,
      11, 3,  8,
      11, 4,  15,
      11, 5,  14,
      11, 6,  13,
      11, 7,  12,
      11, 8,  3,
      11, 9,  2,
      11, 10, 1,
      11, 11, 0,
      11, 12, 7,
      11, 13, 6,
      11, 14, 5,
      11, 15, 4,
      12, 0,  12,
      12, 1,  13,
      12, 2,  14,
      12, 3,  15,
      12, 4,  8,
      12, 5,  9,
      12, 6,  10,
      12, 7,  11,
      12, 8,  4,
      12, 9,  5,
      12, 10, 6,
      12, 11, 7,
      12, 12, 0,
      12, 13, 1,
      12, 14, 2,
      12, 15, 3,
      13, 0,  13,
      13, 1,  12,
      13, 2,  15,
      13, 3,  14,
      13, 4,  9,
      13, 5,  8,
      13, 6,  11,
      13, 7,  10,
      13, 8,  5,
      13, 9,  4,
      13, 10, 7,
      13, 11, 6,
      13, 12, 1,
      13, 13, 0,
      13, 14, 3,
      13, 15, 2,
      14, 0,  14,
      14, 1,  15,
      14, 2,  12,
      14, 3,  13,
      14, 4,  10,
      14, 5,  11,
      14, 6,  8,
      14, 7,  9,
      14, 8,  6,
      14, 9,  7,
      14, 10, 4,
      14, 11, 5,
      14, 12, 2,
      14, 13, 3,
      14, 14, 0,
      14, 15, 1,
      15, 0,  15,
      15, 1,  14,
      15, 2,  13,
      15, 3,  12,
      15, 4,  11,
      15, 5,  10,
      15, 6,  9,
      15, 7,  8,
      15, 8,  7,
      15, 9,  6,
      15, 10, 5,
      15, 11, 4,
      15, 12, 3,
      15, 13, 2,
      15, 14, 1,
      15, 15, 0,
    };
    std::vector<GaloisField<16>> test_case(test_case_data.size());
    check_operator_sub(test_case_data, test_case);
  }
}

template <int Base>
void check_operator_mult(
    const std::vector<unsigned int>& test_case_data,
    std::vector<GaloisField<Base>>& test_case)
{
  std::function<
    GaloisField<Base> (const GaloisField<Base>&, const GaloisField<Base>&)
  > op = [](const GaloisField<Base>& e1, const GaloisField<Base>& e2) {
    return e1 * e2;
  };
  std::transform(
      test_case_data.begin(),
      test_case_data.end(),
      test_case.begin(),
      [](const unsigned int x){
        return GaloisField<Base>(x);
      });
  GNS_EXPECT_GALOIS_FIELD_OP(test_case, op);
}

TEST(GaloisFieldOperatorTest, OperatorMult)
{
  // base 2
  {
    const std::vector<unsigned int> test_case_data = {
      // lhs, rhs, expect
      0, 0, 0,
      0, 1, 0,
      1, 0, 0,
      1, 1, 1,
    };
    std::vector<GaloisField<2>> test_case(test_case_data.size());
    check_operator_mult(test_case_data, test_case);
  }
  // base 4
  {
    const std::vector<unsigned int> test_case_data = {
      // lhs, rhs, expect
      0, 0, 0,
      0, 1, 0,
      0, 2, 0,
      0, 3, 0,
      1, 0, 0,
      1, 1, 1,
      1, 2, 2,
      1, 3, 3,
      2, 0, 0,
      2, 1, 2,
      2, 2, 3,
      2, 3, 1,
      3, 0, 0,
      3, 1, 3,
      3, 2, 1,
      3, 3, 2,
    };
    std::vector<GaloisField<4>> test_case(test_case_data.size());
    check_operator_mult(test_case_data, test_case);
  }
  // base 16
  {
    const std::vector<unsigned int> test_case_data = {
      // lhs, rhs, expect
      0, 0,   0,
      0, 1,   0,
      0, 2,   0,
      0, 3,   0,
      0, 4,   0,
      0, 5,   0,
      0, 6,   0,
      0, 7,   0,
      0, 8,   0,
      0, 9,   0,
      0, 10,  0,
      0, 11,  0,
      0, 12,  0,
      0, 13,  0,
      0, 14,  0,
      0, 15,  0,
      1, 0,   0,
      1, 1,   1,
      1, 2,   2,
      1, 3,   3,
      1, 4,   4,
      1, 5,   5,
      1, 6,   6,
      1, 7,   7,
      1, 8,   8,
      1, 9,   9,
      1, 10,  10,
      1, 11,  11,
      1, 12,  12,
      1, 13,  13,
      1, 14,  14,
      1, 15,  15,
      2, 0,   0,
      2, 1,   2,
      2, 2,   4,
      2, 3,   6,
      2, 4,   8,
      2, 5,   10,
      2, 6,   12,
      2, 7,   14,
      2, 8,   15,
      2, 9,   13,
      2, 10,  11,
      2, 11,  9,
      2, 12,  7,
      2, 13,  5,
      2, 14,  3,
      2, 15,  1,
      3, 0,   0,
      3, 1,   3,
      3, 2,   6,
      3, 3,   5,
      3, 4,   12,
      3, 5,   15,
      3, 6,   10,
      3, 7,   9,
      3, 8,   7,
      3, 9,   4,
      3, 10,  1,
      3, 11,  2,
      3, 12,  11,
      3, 13,  8,
      3, 14,  13,
      3, 15,  14,
      4, 0,   0,
      4, 1,   4,
      4, 2,   8,
      4, 3,   12,
      4, 4,   15,
      4, 5,   11,
      4, 6,   7,
      4, 7,   3,
      4, 8,   1,
      4, 9,   5,
      4, 10,  9,
      4, 11,  13,
      4, 12,  14,
      4, 13,  10,
      4, 14,  6,
      4, 15,  2,
      5, 0,   0,
      5, 1,   5,
      5, 2,   10,
      5, 3,   15,
      5, 4,   11,
      5, 5,   14,
      5, 6,   1,
      5, 7,   4,
      5, 8,   9,
      5, 9,   12,
      5, 10,  3,
      5, 11,  6,
      5, 12,  2,
      5, 13,  7,
      5, 14,  8,
      5, 15,  13,
      6, 0,   0,
      6, 1,   6,
      6, 2,   12,
      6, 3,   10,
      6, 4,   7,
      6, 5,   1,
      6, 6,   11,
      6, 7,   13,
      6, 8,   14,
      6, 9,   8,
      6, 10,  2,
      6, 11,  4,
      6, 12,  9,
      6, 13,  15,
      6, 14,  5,
      6, 15,  3,
      7, 0,   0,
      7, 1,   7,
      7, 2,   14,
      7, 3,   9,
      7, 4,   3,
      7, 5,   4,
      7, 6,   13,
      7, 7,   10,
      7, 8,   6,
      7, 9,   1,
      7, 10,  8,
      7, 11,  15,
      7, 12,  5,
      7, 13,  2,
      7, 14,  11,
      7, 15,  12,
      8, 0,   0,
      8, 1,   8,
      8, 2,   15,
      8, 3,   7,
      8, 4,   1,
      8, 5,   9,
      8, 6,   14,
      8, 7,   6,
      8, 8,   2,
      8, 9,   10,
      8, 10,  13,
      8, 11,  5,
      8, 12,  3,
      8, 13,  11,
      8, 14,  12,
      8, 15,  4,
      9, 0,   0,
      9, 1,   9,
      9, 2,   13,
      9, 3,   4,
      9, 4,   5,
      9, 5,   12,
      9, 6,   8,
      9, 7,   1,
      9, 8,   10,
      9, 9,   3,
      9, 10,  7,
      9, 11,  14,
      9, 12,  15,
      9, 13,  6,
      9, 14,  2,
      9, 15,  11,
      10, 0,  0,
      10, 1,  10,
      10, 2,  11,
      10, 3,  1,
      10, 4,  9,
      10, 5,  3,
      10, 6,  2,
      10, 7,  8,
      10, 8,  13,
      10, 9,  7,
      10, 10, 6,
      10, 11, 12,
      10, 12, 4,
      10, 13, 14,
      10, 14, 15,
      10, 15, 5,
      11, 0,  0,
      11, 1,  11,
      11, 2,  9,
      11, 3,  2,
      11, 4,  13,
      11, 5,  6,
      11, 6,  4,
      11, 7,  15,
      11, 8,  5,
      11, 9,  14,
      11, 10, 12,
      11, 11, 7,
      11, 12, 8,
      11, 13, 3,
      11, 14, 1,
      11, 15, 10,
      12, 0,  0,
      12, 1,  12,
      12, 2,  7,
      12, 3,  11,
      12, 4,  14,
      12, 5,  2,
      12, 6,  9,
      12, 7,  5,
      12, 8,  3,
      12, 9,  15,
      12, 10, 4,
      12, 11, 8,
      12, 12, 13,
      12, 13, 1,
      12, 14, 10,
      12, 15, 6,
      13, 0,  0,
      13, 1,  13,
      13, 2,  5,
      13, 3,  8,
      13, 4,  10,
      13, 5,  7,
      13, 6,  15,
      13, 7,  2,
      13, 8,  11,
      13, 9,  6,
      13, 10, 14,
      13, 11, 3,
      13, 12, 1,
      13, 13, 12,
      13, 14, 4,
      13, 15, 9,
      14, 0,  0,
      14, 1,  14,
      14, 2,  3,
      14, 3,  13,
      14, 4,  6,
      14, 5,  8,
      14, 6,  5,
      14, 7,  11,
      14, 8,  12,
      14, 9,  2,
      14, 10, 15,
      14, 11, 1,
      14, 12, 10,
      14, 13, 4,
      14, 14, 9,
      14, 15, 7,
      15, 0,  0,
      15, 1,  15,
      15, 2,  1,
      15, 3,  14,
      15, 4,  2,
      15, 5,  13,
      15, 6,  3,
      15, 7,  12,
      15, 8,  4,
      15, 9,  11,
      15, 10, 5,
      15, 11, 10,
      15, 12, 6,
      15, 13, 9,
      15, 14, 7,
      15, 15, 8,
    };
    std::vector<GaloisField<16>> test_case(test_case_data.size());
    check_operator_mult(test_case_data, test_case);
  }
}

template <int Base>
void check_operator_div(
    const std::vector<unsigned int>& test_case_data,
    std::vector<GaloisField<Base>>& test_case)
{
  std::function<
    GaloisField<Base> (const GaloisField<Base>&, const GaloisField<Base>&)
  > op = [](const GaloisField<Base>& e1, const GaloisField<Base>& e2) {
    return e1 / e2;
  };
  std::transform(
      test_case_data.begin(),
      test_case_data.end(),
      test_case.begin(),
      [](const unsigned int x){
        return GaloisField<Base>(x);
      });
  GNS_EXPECT_GALOIS_FIELD_OP(test_case, op);
}

TEST(GaloisFieldOperatorTest, OperatorDiv)
{
  // base 2
  {
    const std::vector<unsigned int> test_case_data = {
      // lhs, rhs, expect
      0, 0, 0,
      0, 1, 0,
      1, 0, 0,
      1, 1, 1,
    };
    std::vector<GaloisField<2>> test_case(test_case_data.size());
    check_operator_div(test_case_data, test_case);
  }
  // base 4
  {
    const std::vector<unsigned int> test_case_data = {
      // lhs, rhs, expect
      0, 0, 0,
      0, 1, 0,
      0, 2, 0,
      0, 3, 0,
      1, 0, 0,
      1, 1, 1,
      1, 2, 3,
      1, 3, 2,
      2, 0, 0,
      2, 1, 2,
      2, 2, 1,
      2, 3, 3,
      3, 0, 0,
      3, 1, 3,
      3, 2, 2,
      3, 3, 1,
    };
    std::vector<GaloisField<4>> test_case(test_case_data.size());
    check_operator_div(test_case_data, test_case);
  }
  // base 16
  {
    const std::vector<unsigned int> test_case_data = {
      // lhs, rhs, expect
      0, 0,   0,
      0, 1,   0,
      0, 2,   0,
      0, 3,   0,
      0, 4,   0,
      0, 5,   0,
      0, 6,   0,
      0, 7,   0,
      0, 8,   0,
      0, 9,   0,
      0, 10,  0,
      0, 11,  0,
      0, 12,  0,
      0, 13,  0,
      0, 14,  0,
      0, 15,  0,

      1, 0,   0, 
      1, 1,   1, 
      1, 2,   15,
      1, 3,   10,
      1, 4,   8, 
      1, 5,   6, 
      1, 6,   5, 
      1, 7,   9, 
      1, 8,   4, 
      1, 9,   7, 
      1, 10,  3, 
      1, 11,  14,
      1, 12,  13,
      1, 13,  12,
      1, 14,  11,
      1, 15,  2,

      2, 0,   0,
      2, 1,   2,
      2, 2,   1,
      2, 3,   11,
      2, 4,   15,
      2, 5,   12,
      2, 6,   10,
      2, 7,   13,
      2, 8,   8,
      2, 9,   14,
      2, 10,  6,
      2, 11,  3,
      2, 12,  5,
      2, 13,  7,
      2, 14,  9,
      2, 15,  4,

      3, 0,   0,
      3, 1,   3,
      3, 2,   14,
      3, 3,   1,
      3, 4,   7,
      3, 5,   10,
      3, 6,   15,
      3, 7,   4,
      3, 8,   12,
      3, 9,   9,
      3, 10,  5,
      3, 11,  13,
      3, 12,  8,
      3, 13,  11,
      3, 14,  2,
      3, 15,  6,

      4, 0,   0,
      4, 1,   4,
      4, 2,   2,
      4, 3,   9,
      4, 4,   1,
      4, 5,   7,
      4, 6,   11,
      4, 7,   5,
      4, 8,   15,
      4, 9,   3,
      4, 10,  12,
      4, 11,  6,
      4, 12,  10,
      4, 13,  14,
      4, 14,  13,
      4, 15,  8,

      5, 0,   0,
      5, 1,   5,
      5, 2,   13,
      5, 3,   3,
      5, 4,   9,
      5, 5,   1,
      5, 6,   14,
      5, 7,   12,
      5, 8,   11,
      5, 9,   4,
      5, 10,  15,
      5, 11,  8,
      5, 12,  7,
      5, 13,  2,
      5, 14,  6,
      5, 15,  10,

      6, 0,   0,
      6, 1,   6,
      6, 2,   3,
      6, 3,   2,
      6, 4,   14,
      6, 5,   11,
      6, 6,   1,
      6, 7,   8,
      6, 8,   7,
      6, 9,   13,
      6, 10,  10,
      6, 11,  5,
      6, 12,  15,
      6, 13,  9,
      6, 14,  4,
      6, 15,  12,

      7, 0,   0,
      7, 1,   7,
      7, 2,   12,
      7, 3,   8,
      7, 4,   6,
      7, 5,   13,
      7, 6,   4,
      7, 7,   1,
      7, 8,   3,
      7, 9,   10,
      7, 10,  9,
      7, 11,  11,
      7, 12,  2,
      7, 13,  5,
      7, 14,  15,
      7, 15,  14,

      8, 0,   0,
      8, 1,   8,
      8, 2,   4,
      8, 3,   13,
      8, 4,   2,
      8, 5,   14,
      8, 6,   9,
      8, 7,   10,
      8, 8,   1,
      8, 9,   6,
      8, 10,  7,
      8, 11,  12,
      8, 12,  11,
      8, 13,  3,
      8, 14,  5,
      8, 15,  15,

      9, 0,   0,
      9, 1,   9,
      9, 2,   11,
      9, 3,   7,
      9, 4,   10,
      9, 5,   8,
      9, 6,   12,
      9, 7,   3,
      9, 8,   5,
      9, 9,   1,
      9, 10,  4,
      9, 11,  2,
      9, 12,  6,
      9, 13,  15,
      9, 14,  14,
      9, 15,  13,

      10, 0,  0,
      10, 1,  10,
      10, 2,  5,
      10, 3,  6,
      10, 4,  13,
      10, 5,  2,
      10, 6,  3,
      10, 7,  7,
      10, 8,  9,
      10, 9,  8,
      10, 10, 1,
      10, 11, 15,
      10, 12, 14,
      10, 13, 4,
      10, 14, 12,
      10, 15, 11,

      11, 0,  0,
      11, 1,  11,
      11, 2,  10,
      11, 3,  12,
      11, 4,  5,
      11, 5,  4,
      11, 6,  6,
      11, 7,  14,
      11, 8,  13,
      11, 9,  15,
      11, 10, 2,
      11, 11, 1,
      11, 12, 3,
      11, 13, 8,
      11, 14, 7,
      11, 15, 9,

      12, 0,  0,
      12, 1,  12,
      12, 2,  6,
      12, 3,  4,
      12, 4,  3,
      12, 5,  9,
      12, 6,  2,
      12, 7,  15,
      12, 8,  14,
      12, 9,  5,
      12, 10, 11,
      12, 11, 10,
      12, 12, 1,
      12, 13, 13,
      12, 14, 8,
      12, 15, 7,

      13, 0,  0,
      13, 1,  13,
      13, 2,  9,
      13, 3,  14,
      13, 4,  11,
      13, 5,  15,
      13, 6,  7,
      13, 7,  6,
      13, 8,  10,
      13, 9,  2,
      13, 10, 8,
      13, 11, 4,
      13, 12, 12,
      13, 13, 1,
      13, 14, 3,
      13, 15, 5,

      14, 0,  0,
      14, 1,  14,
      14, 2,  7,
      14, 3,  15,
      14, 4,  12,
      14, 5,  5,
      14, 6,  8,
      14, 7,  2,
      14, 8,  6,
      14, 9,  11,
      14, 10, 13,
      14, 11, 9,
      14, 12, 4,
      14, 13, 10,
      14, 14, 1,
      14, 15, 3,

      15, 0,  0,
      15, 1,  15,
      15, 2,  8,
      15, 3,  5,
      15, 4,  4,
      15, 5,  3,
      15, 6,  13,
      15, 7,  11,
      15, 8,  2,
      15, 9,  12,
      15, 10, 14,
      15, 11, 7,
      15, 12, 9,
      15, 13, 6,
      15, 14, 10,
      15, 15, 1,
    };

    std::vector<GaloisField<16>> test_case(test_case_data.size());
    check_operator_div(test_case_data, test_case);
  }
}
} // namespace gns
