sudo: required
dist: trusty
language: cpp
matrix:
  include:
    - os: linux
      compiler: gcc
      env:
        - BUILD_TYPE=Coverage
          GNS_BUILD_TEST="-DGNS_BUILD_TEST=ON"
      addons:
        apt:
          packages:
            - lcov
    - os: linux
      compiler: gcc
      env:
        - BUILD_TYPE=Debug
          GNS_BUILD_TEST="-DGNS_BUILD_TEST=ON"
          GNS_BUILD_TEST_MEMORYCHECK="-DGNS_BUILD_TEST_MEMORYCHECK=ON"
    - os: linux
      compiler: clang++
      env:
        - BUILD_TYPE=Debug
          GNS_BUILD_TEST="-DGNS_BUILD_TEST=ON"
          GNS_BUILD_TEST_MEMORYCHECK="-DGNS_BUILD_TEST_MEMORYCHECK=ON"
    - os: osx
      compiler: gcc
      env:
        - BUILD_TYPE=Debug
          GNS_BUILD_TEST="-DGNS_BUILD_TEST=ON"
    - os: osx
      compiler: clang++
      # addons:
      env:
        - BUILD_TYPE=Debug
          GNS_BUILD_TEST="-DGNS_BUILD_TEST=ON"
before_install:
  - echo $LANG
  - echo $LC_ALL
  - ls -la
  - export GNS_BUILD_BENCHMARKS="-DGNS_BUILD_BENCHMARKS=ON"
  - export GNS_BUILD_EXAMPLES="-DGNS_BUILD_EXAMPLES=OFF"
  - if [ "$TRAVIS_OS_NAME" == "osx" -a "$CXX" == "g++" ]; then brew install gcc48; fi
  # valgrind does not work in osx so we only test with valgrind on linux
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      export BASEPATH=`pwd`;
      mkdir ${BASEPATH}/usr ;
      export PATH="${BASEPATH}/usr/bin:$PATH" ;
      export LD_LIBRARY_PATH="${BASEPATH}/usr/lib:$LD_LIBRARY_PATH";
      wget http://valgrind.org/downloads/valgrind-3.12.0.tar.bz2 ;
      tar xjf valgrind-3.12.0.tar.bz2 ;
      cd valgrind-3.12.0 ;
      ./configure --prefix=${BASEPATH}/usr > /dev/null ;
      make -j3 > /dev/null ;
      make install > /dev/null ;
      cd .. ;
      valgrind --version;
    fi
install:
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then ci/travis_cmake_setup.sh; fi
  # /usr/bin/gcc is 4.6 always, but gcc-X.Y is available. This is for both OSes.
  - if [ "$CXX" == "g++" ]; then
      export CXX="g++-4.8" CC="gcc-4.8";
    fi
  - if [ "${BUILD_TYPE}" == "Coverage" -a "${TRAVIS_OS_NAME}" == "linux" ]; then
      PATH=~/.local/bin:${PATH};
      pip install --user --upgrade pip;
      pip install --user cpp-coveralls;
    fi
  # /usr/bin/clang is 3.4, lets override with modern one.
  #- if [ "$CXX" = "clang++" ] && [ "$TRAVIS_OS_NAME" = "linux" ]; then export CXX="clang++-3.7" CC="clang-3.7"; fi
  - echo ${PATH}
  - echo ${CXX}
  - ${CXX} --version
  - ${CXX} -v
  - cmake --version
script:
  - ci/build_cmake.sh
after_success:
  - if [ "${BUILD_TYPE}" == "Coverage" -a "${TRAVIS_OS_NAME}" == "linux" ]; then
      coveralls --verbose --include gns --gcov-options '\-lp' --root .. --build-root build;
    fi
